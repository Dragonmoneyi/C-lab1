//Лабораторная работа №1 Выполнил: Черкашин Юрий ВПИ22
//2.1
//123 	(int)	- 123 
//1E6	(int) 	- 10^6 
//12345678	(UL) - 123456789 
//-5	(int) 	- -5 
//'0'	(char)	- 48 
//058	- не верно 
//'\x7'	(char) 	- 7 
//0X-1AD	- не верно 
//'\122' (char)	- 0122 - 82 
//00123	(int) 	- 83 
//0xffffffL  (long) - 16777215 
//01A 	- не верно 
//-'x' 	(char) 	-  -120 
//"x" - 4195828
//'a'U 	- не верно
//0731UL  (UL) - 473
//"\n"	(char)	- 10
//+0xaf	 (int)	- 175
//0X0	(int)	- 0

//2.2
//1.71 	(float) - 1.71
//1E-6	(float) - 0,000001
//0.314159E1F	(float) - 3.141590
//.005	(float)	- 0.005
//0051E-04	(float) - 0.0051
//5.E+2	 (float) - 500
//0e0	(float) - 0
//0x1A1.5 - не верно
//05.5	(float)  - 5.5
//0 (float) - 0
//0X1E6	 (float) -> 486
//0F	- не верно
//1234.56789L	(long float) - 1234.56789
//1.0E-10D (double float) - 0.0
//3.1415U	- не верно
//1e-2f	 (float) - 0,01
//-12.3E-6  (float) - -0,0000123
//+10e6	 (float) - 10000000
//123456L (long) - 123456
//E-6	- не верно



//2.3
//{
//int a, b, c, d, e;
//a = 2;  b = 13;  c = 7;  d = 19;  e = -4;
//b/a/c	 = 0
//d/a%c	 = 2
//c%d-e	 = 11
//-e%a+b/a*-5+5 = -25
//b%e	= 1
//7-d%+(3-a) =	7
//b%-e*c = 7
//9/c--20/d = 2
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{int a, b, c, d, e;a = 2;  b = 13;  c = 7;  d = 19;  e = -4;
//printf("x = %i,%i,%i,%i,%i,%i,%i,%i",b/a/c,d/a%c,c%d-e,-e%a+b/a*-5+5,b%e,7-d%+(3-a),b%-e*c,9/c--20/d);
//return 0;}
//}

//2.4
//{
//int a, c;  c = 5;
//a)c++; c=6	a=12 - верно
//int main()
//{int a, c;  c = 5; c++; a=2*c; 
//printf("a = %i, c = %i",a,c); 
//return 0;}
//b) a = 2*c++; c=6 a=10 - не верно
//c) c+=1;a = 2*c; c=6	a=12 - верно
//d) a = c++ +c; c=6	a=11 - не верно
//e) ++c;a=c+c; c=6	a=12 - верно
//f) a = ++ c+c; c=6	a=12 - верно
//g) a = c += 1+c; c=11 a=11 - не верно
//h) a = (c+=1)+c; c=6 a=12 - верно


//2.5
//int a, c;  c = 5;
//a) -- c ;a = c / 2; 	c=4 	a=2 - верно
//b) a = -- c / 2; c=4	a=2	- верно
//c) c -= 1;a = c % 2;	c=4	a=0 - не верно
//d) a = c -- / 2; c=4	a=2 - верно
//e) a = c -= 1/2; c=5	a=5 - не верно
//f) a = (c = c - 1)/2;	c=4 a=2	- верно
//g) a = (c -= 1)/2; c=4 a=2 - верно
//h) a=(c-= 1)/2.0; c=4	a=2 - верно


//2.6
//a) E1 op= E2  ==  E1=E1 op E2 
//b) E1 op= E2  ==  E1=E1 op (E2) 
//a) Эквивалентны только в случае если E2 имеет меньший приоритет операции, либо является переменной или константной
//b) Эквивалентны всегда

//2.7
//int a, b, c;   a = 2;  b = 6;  c = 3;
//1)-  -  - a 	- -2
//2)--  - a	- не верно
//3)b--  - a	- 4
//4)a += a ++ - 5
//5)++ b / a ++ * --c  - 6
//6)a --- b   -	-4
//7)- a-- -b  -	-8
//8)a ++ = b	- не верно
//9)a = a ++	- 2
//10)b++ / ++a * c --	- 6
//11)-  --a	- -1
//12)a-  --c	- 0
//13)a ++ = a	- не верно
//14)++ a = b	- не верно
//15)a = ( b + 1 ) ++	- не верно

//2.8
//int  i,  j,  k, m;  char c, d;   i = 1;  j = 2;  k = -7; m = 0; c = 'w'; 
//1)d = ’a’+1 < c  - 0
//2)m = - i - 5 * j >= k+1  - 0
//3)i + j++  + k = = -2*j  - не верно
//4)m = 3 < j < 5  - 1
//5)m = 3 = = j < 5  - не верно
//6)m = = c = 'w' - не верно
//7)m = c != 87	  - 1
//8)m = c = ! 87  - 0
//9)m = ! c = 87  - не верно
//10)m = !c+87	- 87
//11)! m = =c + 87 - не верно
//12)m ! = c + 87  - не верно
//13)k *= 3 + j	 - не верно
//14)k = = j - 9 = = i  - -35
//15)i + j = !k	  - не верно
//16)i += ++ j + 3  - 7
//17)k %= m = 1 + n / 2  - не верно
//18)1 + 3 * n += 7 / 5	 - не верно
//19)1 + 3 * (n += 7) / 5 - не верно
//20)c + i < c - 'x'+10	 - 0
//21)i - k = = '0'+9 < 10  - не верно

//2.9
//not (not x) = x   - 	!(!x) == x - верно
//x and true = x    -	x && true == x	- верно


//2.10
//Верно, сложение имеет более высокий приоритет

//2.11
// !( a>b )  - (a<=b)
// !( 2*a == b+4 ) - (2*a != b+4)
// !( a<b && c<d ) - (a>=b || c>=d)
// !( a<2 || a>5) - (a>=2 && a<=5)
// !( a<1 || b<2 && c<3 ) - (a>=1 && b>=2 || c>=3)

//2.12
//char c; short s; int i;  unsigned u; 	signed char sc; 
//float f; double d; long lng;	unsigned short us; long double ld;
//1) c - s / i 	 - int
//2) u * 3 - 3.0 * u - i  - double
//3) u - us * i	 - int
//4) ( sc + d ) * ld  -	long double
//5) (5 * lng - 'a' ) * ( s + u / 2 ) - long
//6) ( f + 3 ) / ( 2.5f - s * 3.14 ) -	double

//2.14
//s = 33 i = 33 lng = 33 f = 33.000000 d = 33.000000
//s = 33 i = 33 lng = 33 f = 33.000000 d = 33.000000
//s = 5653 i = 333333 lng = 333333 f = 333333.000000 d = 333333.000000
//s = 5653 i = 5653 lng = 5653 f = 5653.000000 d = 5653.000000
//s = 33 i = 33 lng = 33 f = 33.000000 d = 33.000000
//s = 33 i = 33 lng = 33 f = 33.000000 d = 33.000000
//s = 33 i = 33 lng = 33 f = 33.333332 d = 33.333333
//s = 33 i = 33 lng = 33 f = 33.000000 d = 33.000000
//s = 33 i = 33 lng = 33 f = 33.000000 d = 33.000000

//2.15
//x = 2.000000 ;y = 1
//x = 1 ;y = 2.000000
//x = 1.600000 ;y = 3
//x = 0.781250; y = 2
//x = 0 y = 0.000000


//2.22
//{
//Дано вещественное число x . Не пользуясь никакими операциями, кроме умножения, получить
//a)x^21 за шесть операций
//b)x^3 и x^10 за четыре операции
//c)x^5 и x^13 за пять операций
//d)x^2, x^5 и x^17 за шесть операций
//e)x^4, x^12 и x^28 за шесть операций
//a)
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main() 
//{
//    long x,y;
//    printf("Vvod x -> ");
//    scanf("%ld",&x);
//    y=x*x*x;
//    y=y*y*x;
//    y=y*y*y;
//    printf("x^21 = %ld",y);
//    return 0;
//}
//b)
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{
//	long x, y, z;
//	printf ("x = ");
//	scanf ("%ld", &x);
//	z = x * x;
//	y = z * x;
//	printf ("y = %ld\n", y);
//	y = z * y;
//	y = y * y;
//	printf ("y = %ld", y);
//	return 0;
//}
//c)
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{
//	long x, y, z;
//	printf ("x = ");
//	scanf ("%ld", &x);
//	y = x * x;
//	z = y * x;
//	y = z * y;
//	printf ("y = %ld\n", y);
//	y = y * y * z;
//	printf ("y = %ld", y);
//	return 0;
//}
//d)
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{
//	long x, y, z;
//	printf ("x = ");
//	scanf ("%ld", &x);
//	y = x * x;
//	printf ("y = %ld\n", y);
//	z = y * y;
//	y = z * x;
//	printf ("y = %ld\n", y);
//	z = z * z;
//	y = z * z * x;
//	printf ("y = %ld", y);
//	return 0;
//}
//e)
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{
//	long x, y, z;
//	printf ("x = ");
//	scanf ("%ld", &x);
//	y = x * x;
//	z = y = y * y;
//	printf ("y = %ld\n", y);
//	y = y * y;
//	y = z * y;
//	printf ("y = %ld\n", y);
//	y = y * y;
//	y = y * z;
//	printf ("y = %ld", y);
//	return 0;
//}



//2.23
//За: блягодаря этому Си экономит время 
//Против: есть шанс на возникновение проблем в случае с вложенными операциями

//2.24
//Могут ли совпадать имена литералов-перечислителей и имена обычных переменных в одной области видимости?
//Нет, поскольку перечислители в той же области видимости будут равносильны переменным по правилам именования.
//Могут ли разные литералы-перечислители иметь одинаковые значения?
//Да, поскольку значения перечислителей могут назначаться автоматически


//2.25
//«Упаковать» четыре символа в беззнаковое целое. Длина беззнакового целого равна 4.
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main() 
//{
//   char  a, b, c, d;
//   scanf("%c%c%c%c", &a, &b, &c, &d);
//   unsigned int pack;
//   pack = ((a << 8 | b) << 8 | c) << 8 | d;
//   printf("packed - %u",pack);
//    return 0;
//}


//2.26
//«Распаковать» беззнаковое целое число в четыре символа. Длина беззнакового целого равна 4.
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main() 
//{
//	char a, b, c, d;
//	unsigned int x;
//	printf("x -> ");
//	scanf("%u", &x);
//	d = x;
//	c = x >> 8;
//	b = x >> 16;
//	a = x >> 24;
//	printf("%c%c%c%c", a, b, c, d);
//	return 0;
//}

//2.27
//Заменить в целочисленной переменной x n бит, начиная с позиции p, n старшими инвертированными битами целочисленной переменной y.
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{
//    int n, p, x, y, i, m = 0xFFFFFFFF;
//    scanf("%d%d%x%x", &n, &p, &x, &y);
//    y = ~y;
//    for (i = n; i; m <<= 1, i--);
//    for (i = n; i < p; i++)
//    {
//        m <<= 1;
//        m += 1;
//    }
//
//    y <<= (32 - n);
//    x >>= (p - n);
//    x |= y;
//    x >>= 1;
//    x &= m;
//    printf("X=%x\n", x);
//    return 0;
//}

//2.28
//Циклически сдвинуть значение целочисленной величины на n позиций вправо.
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{
//	int x, n;
//	scanf("%d%d", &x, &n);
//	x >>= n;
//	printf("x = %d", x);
//	return 0;
//}


//2.29
//Циклически сдвинуть значение целочисленной величины на n позиций влево.
//#include <stdio.h>
//#include <stdlib.h>
//#include <math.h>
//int main()
//{
//	int x, n;
//	scanf("%d%d", &x, &n);
//	x <<= n;
//	printf("x = %d", x);
//	return 0;
//}


//2.30
//Выясните некоторые свойства и особенности поведения доступного Вам транслятора Си:
//a) выяснить, сколько байт отведено для хранения данных типа short, int, long, float, double и long double;
//short 2
//int 4
//long 8
//float 4
//double 8
//long double 16
//выяснить способ представления типа char ( signed- или unsigned- вариант );
//signed char--------------------------------------------------------------
//Проконтролировать, все ли способы записи констант допустимы:
//целых ( обычная форма записи, u/U, l/L, их комбинации; запись констант в восьмеричной и шестнадцатиричной системах счисления )
//вещественных ( обычная форма записи, в экспоненциальном виде, f/F, l/L, e/E )
//символьных ( обычная форма записи, с помощью эскейп-последовательности ) и строковых ( в частности, происходит ли конкатенация рядом расположенных строковых констант )
//Все да-------------------------------------------------------------------
//выяснить, как упорядочены коды символов '0' - '9', 'a' - 'z', 'A' - 'Z', пробел (между собой и относительно друг друга);
///char int
///'0' - '9' 48-57
///'a' - 'z' 97-122
///'A' - 'Z' 65-90
///space 32
//Проконтролировать, происходит ли инициализация переменных по умолчанию;
//Да, нулевым значением-----------------------------------------------------
//Проверить, реагирует ли транслятор на попытку изменить константу;
//Да------------------------------------------------------------------------
//Исследовать особенности выполнения операции % с отрицательными операндами;
//Левый операнд влияет, правый — нет----------------------------------------
//Проверьте, действительно ли операции отношения == и != имеют более низкий приоритет, чем все другие операции отношения;
//Да------------------------------------------------------------------------
//Проверьте, действительно ли выполняется правило "ленивых вычислений" выражений в Си, т.е. прекращается ли вычисление выражений с логическими операциями, если возможно "досрочно" установить значение результата;
//Да------------------------------------------------------------------------
//Проверьте, все ли виды операнда операции sizeof (X), определяемые стандартом для арифметических типов, допускаются компилятором; действительно ли выражение X не вычисляется.
//Да------------------------------------------------------------------------
//}
